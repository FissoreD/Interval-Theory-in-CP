// Generated by js_of_ocaml
//# buildInfo:effects=false, use-js-string=false, version=5.0.1+git-cee6877-dirty
(function
   (globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_float_of_string=runtime.caml_float_of_string,
     caml_register_global=runtime.caml_register_global,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    var
     global_data=runtime.caml_get_global_data(),
     cst=caml_string_of_jsbytes("[]"),
     cst$1=caml_string_of_jsbytes("; "),
     cst$2=caml_string_of_jsbytes(":"),
     cst$0=caml_string_of_jsbytes(""),
     cst$11=caml_string_of_jsbytes("-"),
     cst_Inverse_binary_operator_no=
      caml_string_of_jsbytes
       ("Inverse binary operator not implemented (operator.ml)"),
     cst$3=caml_string_of_jsbytes("*"),
     cst$4=caml_string_of_jsbytes("+"),
     cst$5=caml_string_of_jsbytes("-"),
     cst$6=caml_string_of_jsbytes("/"),
     cst$7=caml_string_of_jsbytes("<="),
     cst$8=caml_string_of_jsbytes(">="),
     cst$9=caml_string_of_jsbytes("\xe2\x88\xa9"),
     cst_U=caml_string_of_jsbytes("U"),
     cst$10=caml_string_of_jsbytes("="),
     cst_Empty=caml_string_of_jsbytes("Empty"),
     cst$12=caml_string_of_jsbytes("("),
     cst$13=caml_string_of_jsbytes(" "),
     cst$14=caml_string_of_jsbytes(" "),
     cst$15=caml_string_of_jsbytes(" "),
     cst$16=caml_string_of_jsbytes(")"),
     cst_Empty$0=caml_string_of_jsbytes("Empty"),
     cst$18=caml_string_of_jsbytes(" "),
     cst$17=caml_string_of_jsbytes(""),
     cst_IntervalTheoryInCP_Parser_=
      caml_string_of_jsbytes("IntervalTheoryInCP.Parser.MenhirBasics.Error"),
     cst$19=caml_string_of_jsbytes("."),
     ocaml_lex_tables=
      [0,
       caml_string_of_jsbytes
        ("\0\0\xf1\xff\xf2\xff\xf3\xff\x02\0\x03\0\xf7\xff\xf9\xff\x01\0K\0W\0a\0Z\0\xfe\xff\xcc\0-\0\x01\0\xaa\0\xbd\0\xd8\0\xe2\0\xf5\xff\xf4\xff"),
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x05\0\xff\xff\x04\0\t\0\x02\0\xff\xff\0\0\x07\0\0\0\x04\0\x03\0\x03\0\x03\0\xff\xff\xff\xff"),
       caml_string_of_jsbytes
        ("\xff\xff\0\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0"),
       caml_string_of_jsbytes
        ("\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0e\0\x0e\0\xff\xff\0\0\x0e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0e\0\0\0\0\0\0\0\0\0\b\0\b\0\0\0\x02\0\x01\0\x07\0\x06\0\x0e\0\x0b\0\t\0\x0f\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x0e\0\x0e\0\x04\0\x03\0\x05\0\x16\0\x15\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\x0e\0\x10\0\x0e\0\0\0\0\0\0\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x13\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\x0e\0\x0e\0\0\0\x12\0\x0e\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0e\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\0\0\x0e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\r\0\xff\xff\0\0\0\0\0\0\0\0\x0e\0\x0e\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0e\0\0\0\x0e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"),
       caml_string_of_jsbytes
        ("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x10\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\b\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\n\0\xff\xff\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\x0b\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\x0e\0\x0e\0\xff\xff\x11\0\x0e\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\x11\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0e\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\xff\xff\x0e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\x0e\0\x0e\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0e\0\xff\xff\x0e\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff"),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes(""),
       caml_string_of_jsbytes("")],
     cst$20=caml_string_of_jsbytes(""),
     cst$21=caml_string_of_jsbytes(""),
     Stdlib=global_data.Stdlib,
     Stdlib_Printf=global_data.Stdlib__Printf,
     Stdlib_Option=global_data.Stdlib__Option,
     Stdlib_List=global_data.Stdlib__List,
     Stdlib_Hashtbl=global_data.Stdlib__Hashtbl,
     Assert_failure=global_data.Assert_failure,
     Stdlib_Lexing=global_data.Stdlib__Lexing,
     Stdlib_Queue=global_data.Stdlib__Queue,
     IntervalTheoryInCP=[0];
    caml_register_global(58,IntervalTheoryInCP,"IntervalTheoryInCP");
    var
     _h_=
      [0,
       [12,
        91,
        [8,
         [0,0,0],
         0,
         1,
         [11,caml_string_of_jsbytes(", "),[8,[0,0,0],0,1,[12,93,0]]]]],
       caml_string_of_jsbytes("[%.*f, %.*f]")],
     _i_=[0,[8,[0,0,0],0,1,0],caml_string_of_jsbytes("%.*f")],
     _l_=[0,[8,[0,0,0],0,1,0],caml_string_of_jsbytes("%.*f")],
     _m_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(", "),[2,0,0]]],
       caml_string_of_jsbytes("%s, %s")],
     _n_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(", "),[2,0,0]]],
       caml_string_of_jsbytes("%s, %s")],
     _j_=
      [0,
       [12,
        34,
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes('" [label="'),
          [2,0,[11,caml_string_of_jsbytes('"]\n'),0]]]]],
       caml_string_of_jsbytes('"%d" [label="%s"]\n')],
     _k_=
      [0,
       [12,
        34,
        [4,
         0,
         0,
         0,
         [11,
          caml_string_of_jsbytes('" -> "'),
          [4,0,0,0,[11,caml_string_of_jsbytes('"\n'),0]]]]],
       caml_string_of_jsbytes('"%d" -> "%d"\n')],
     _o_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Internal failure -- please contact the parser generator's developers.\n"),
        [10,0]],
       caml_string_of_jsbytes
        ("Internal failure -- please contact the parser generator's developers.\n%!")],
     _p_=[0,caml_string_of_jsbytes("lib/my_parser/parser.ml"),297,4],
     _q_=[0,0];
    function make_interval(a,b)
     {var _a5_=caml_call2(Stdlib[17],a,b);
      return [0,[0,caml_call2(Stdlib[16],a,b),_a5_]]}
    var _a_=Stdlib_Option[10],empty=0;
    function symbol(i1,i2)
     {if(i1 && i2)
       {var _a4_=i2[1],d=_a4_[2],c=_a4_[1],match=i1[1],b=match[2],a=match[1];
        return [0,[0,a + c,b + d]]}
      return 0}
    function symbol$0(i1,i2)
     {if(i1 && i2)
       {var _a3_=i2[1],d=_a3_[2],c=_a3_[1],match=i1[1],b=match[2],a=match[1];
        return [0,[0,a - d,b - c]]}
      return 0}
    function times_div(op,i1,i2)
     {if(i1 && i2)
       {var
         _aW_=i2[1],
         d=_aW_[2],
         c=_aW_[1],
         match=i1[1],
         b=match[2],
         a=match[1],
         _aX_=[0,caml_call2(op,b,d),0],
         _aY_=[0,caml_call2(op,b,c),_aX_],
         _aZ_=[0,caml_call2(op,a,d),_aY_],
         l=[0,caml_call2(op,a,c),_aZ_],
         _a0_=[0,Stdlib[25],Stdlib[26]],
         _a1_=
          function(param,x)
           {var b=param[2],a=param[1],_a2_=caml_call2(Stdlib[17],b,x);
            return [0,caml_call2(Stdlib[16],a,x),_a2_]};
        return [0,caml_call3(Stdlib_List[25],_a1_,_a0_,l)]}
      return 0}
    function _b_(_aV_,_aU_){return _aV_ * _aU_}
    function symbol$1(_aS_,_aT_){return times_div(_b_,_aS_,_aT_)}
    function _c_(_aR_,_aQ_){return _aR_ / _aQ_}
    function symbol$2(_aO_,_aP_){return times_div(_c_,_aO_,_aP_)}
    function inter_union(op1,op2,i1,i2)
     {if(i1 && i2)
       {var
         _aN_=i2[1],
         d=_aN_[2],
         c=_aN_[1],
         match=i1[1],
         b=match[2],
         a=match[1],
         b$0=caml_call2(op2,b,d),
         a$0=caml_call2(op1,a,c);
        return a$0 <= b$0?make_interval(a$0,b$0):empty}
      return 0}
    var _d_=Stdlib[16],_e_=Stdlib[17];
    function symbol$3(_aL_,_aM_){return inter_union(_e_,_d_,_aL_,_aM_)}
    var _f_=Stdlib[17],_g_=Stdlib[16];
    function symbol$4(_aJ_,_aK_){return inter_union(_g_,_f_,_aJ_,_aK_)}
    function symbol_bind(i1,i2)
     {function _aI_(param){var a=param[2];return [0,a,Stdlib[25]]}
      return symbol$3(i1,caml_call2(Stdlib_Option[7],_aI_,i2))}
    function symbol$5(i1,i2)
     {function _aH_(param){var a=param[1];return [0,Stdlib[26],a]}
      return symbol$3(i1,caml_call2(Stdlib_Option[7],_aH_,i2))}
    function symbol$6(i1,i2)
     {function _aG_(param){var a=param[1];return [0,a,a]}
      return symbol$3(i1,caml_call2(Stdlib_Option[7],_aG_,i2))}
    function size(param)
     {if(! param)return 0.;
      var match=param[1],b=match[2],a=match[1];
      return b - a}
    function to_string(opt,param)
     {if(opt)var sth=opt[1],dec=sth;else var dec=0;
      if(! param)return cst;
      var match=param[1],b=match[2],a=match[1];
      return caml_call5(Stdlib_Printf[4],_h_,dec,a,dec,b)}
    function print(opt,t)
     {if(opt)var sth=opt[1],dec=sth;else var dec=0;
      var _aF_=to_string([0,dec],t);
      return caml_call1(Stdlib[42],_aF_)}
    var
     IntervalTheoryInCP_Interval=
      [0,
       make_interval,
       empty,
       _a_,
       size,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       symbol_bind,
       symbol$5,
       symbol$6,
       to_string,
       print];
    caml_register_global
     (63,IntervalTheoryInCP_Interval,"IntervalTheoryInCP__Interval");
    function update(cell,new_value)
     {cell[1] = cell[2];cell[2] = new_value;return 0}
    function empty_memory(mem)
     {function _aE_(param,v){v[2] = empty;return 0}
      return caml_call2(Stdlib_Hashtbl[12],_aE_,mem)}
    function to_tbl(m)
     {var res=caml_call2(Stdlib_Hashtbl[1],0,2048);
      function _aD_(param)
       {var v=param[2],k=param[1];
        return caml_call3(Stdlib_Hashtbl[11],res,k,[0,v,v])}
      caml_call2(Stdlib_List[17],_aD_,m);
      return res}
    function to_string$0(opt,m)
     {if(opt)var sth=opt[1],dec=sth;else var dec=3;
      function _ay_(k,param)
       {var current=param[2];
        return function(acc)
         {var
           _az_=to_string([0,dec],current),
           _aA_=caml_call2(Stdlib[28],_az_,cst$1),
           _aB_=caml_call2(Stdlib[28],cst$2,_aA_),
           _aC_=caml_call2(Stdlib[28],k,_aB_);
          return caml_call2(Stdlib[28],acc,_aC_)}}
      return caml_call3(Stdlib_Hashtbl[14],_ay_,m,cst$0)}
    function print$0(opt,m)
     {if(opt)var sth=opt[1],dec=sth;else var dec=3;
      var _ax_=to_string$0([0,dec],m);
      return caml_call1(Stdlib[42],_ax_)}
    var
     IntervalTheoryInCP_Memory=
      [0,update,empty_memory,to_tbl,to_string$0,print$0];
    caml_register_global
     (65,IntervalTheoryInCP_Memory,"IntervalTheoryInCP__Memory");
    function op_to_cpl(param)
     {switch(param)
       {case 0:return [0,symbol$1,cst$3];
        case 1:return [0,symbol,cst$4];
        case 2:return [0,symbol$0,cst$5];
        case 3:return [0,symbol$2,cst$6];
        case 4:return [0,symbol$5,cst$7];
        case 5:return [0,symbol_bind,cst$8];
        case 6:return [0,symbol$3,cst$9];
        case 7:return [0,symbol$4,cst_U];
        default:return [0,symbol$6,cst$10]}}
    function inv_op(i1,i2,r,param)
     {switch(param)
       {case 0:
         var _at_=symbol$3(i2,symbol$2(r,i1));
         return [0,symbol$3(i1,symbol$2(r,i2)),_at_];
        case 1:
         var _au_=symbol$3(i2,symbol$0(r,i1));
         return [0,symbol$3(i1,symbol$0(r,i2)),_au_];
        case 2:
         var _av_=symbol$3(i2,symbol$0(i1,r));
         return [0,symbol$3(i1,symbol(r,i2)),_av_];
        case 3:
         var _aw_=symbol$3(i2,symbol$2(i1,r));
         return [0,symbol$3(i1,symbol$1(r,i2)),_aw_];
        default:return caml_call1(Stdlib[1],cst_Inverse_binary_operator_no)}}
    function op_to_fun(op){return op_to_cpl(op)[1]}
    function op_to_str(op){return op_to_cpl(op)[2]}
    function is_comparator(param)
     {switch(param){case 4:case 5:case 8:return 1;default:return 0}}
    var Binary=[0,op_to_cpl,inv_op,op_to_fun,op_to_str,is_comparator];
    function op_to_cpl$0(param)
     {return [0,function(a){return symbol$0(make_interval(0.,0.),a)},cst$11]}
    function inv_op$0(i1,r,param)
     {return symbol$3(i1,symbol$0(make_interval(0.,0.),r))}
    function op_to_fun$0(op){return op_to_cpl$0(op)[1]}
    function op_to_str$0(op){return op_to_cpl$0(op)[2]}
    var
     Unary=[0,op_to_cpl$0,inv_op$0,op_to_fun$0,op_to_str$0],
     IntervalTheoryInCP_Operator=[0,Binary,Unary];
    caml_register_global
     (66,IntervalTheoryInCP_Operator,"IntervalTheoryInCP__Operator");
    function get_leaf_interval(mem,param)
     {switch(param[0])
       {case 0:var v=param[1];return caml_call2(Stdlib_Hashtbl[6],mem,v)[2];
        case 1:var f=param[1];return make_interval(f,f);
        default:var i=param[1];return i}}
    function get_interval(mem,param)
     {if(typeof param === "number")return empty;
      if(0 === param[0]){var i1=param[1];return get_leaf_interval(mem,i1)}
      var match=param[1],i1$0=match[2];
      return i1$0}
    function eval_bottom_top(mem,l)
     {if(typeof l === "number")return l;
      switch(l[0])
       {case 0:return l;
        case 1:
         var
          match=l[1],
          c=match[3],
          opu=match[1],
          f=caml_call1(Unary[3],opu),
          c$0=eval_bottom_top(mem,c),
          i1=get_interval(mem,c$0);
         return [1,[0,opu,caml_call1(f,i1),c$0]];
        default:
         var
          match$0=l[1],
          l$0=match$0[4],
          r=match$0[3],
          op=match$0[1],
          f$0=caml_call1(Binary[3],op),
          l$1=eval_bottom_top(mem,l$0),
          r$0=eval_bottom_top(mem,r),
          i2=get_interval(mem,r$0),
          i1$0=get_interval(mem,l$1),
          i=caml_call2(f$0,i1$0,i2);
         if(caml_call1(_a_,i))empty_memory(mem);
         return [2,[0,op,i,r$0,l$1]]}}
    function eval_top_bottom(mem,tree)
     {function aux(res,l)
       {if(typeof l === "number")return l;
        switch(l[0])
         {case 0:
           var _as_=l[1];
           if(0 !== _as_[0])return l;
           var x=_as_[1];
           update(caml_call2(Stdlib_Hashtbl[6],mem,x),res);
           return l;
          case 1:
           var
            match=l[1],
            c=match[3],
            opu=match[1],
            i1=get_interval(mem,c),
            i1$0=caml_call3(Unary[2],i1,res,opu),
            c$0=aux(i1$0,c);
           return [1,[0,opu,res,c$0]];
          default:
           var
            match$0=l[1],
            l$0=match$0[4],
            r=match$0[3],
            op=match$0[1],
            i2=get_interval(mem,r),
            i1$1=get_interval(mem,l$0),
            match$1=caml_call4(Binary[2],i1$1,i2,res,op),
            i2$0=match$1[2],
            i1$2=match$1[1],
            r$0=aux(i2$0,r),
            l$1=aux(i1$2,l$0);
           return [2,[0,op,res,r$0,l$1]]}}
      if(typeof tree !== "number" && 2 === tree[0])
       {var match=tree[1],l=match[4],r=match[3],i=match[2],op=match[1];
        if(typeof r !== "number" && 0 === r[0])
         return caml_call1(_a_,i)?0:[2,[0,op,i,r,aux(i,l)]];
        return 0}
      return 0}
    function print$1(opt,_an_,_am_,mem)
     {if(opt)var sth=opt[1],simple_version=sth;else var simple_version=0;
      if(_an_)var sth$0=_an_[1],dec=sth$0;else var dec=0;
      if(_am_)var sth$1=_am_[1],infix=sth$1;else var infix=0;
      return function(param)
       {if(typeof param === "number")return caml_call1(Stdlib[42],cst_Empty);
        switch(param[0])
         {case 0:
           var _ao_=param[1];
           switch(_ao_[0])
            {case 0:
              var x=_ao_[1];
              caml_call1(Stdlib[42],x);
              var _ap_=1 - simple_version;
              return _ap_
                      ?print([0,dec],caml_call2(Stdlib_Hashtbl[6],mem,x)[2])
                      :_ap_;
             case 1:
              var f=_ao_[1];return caml_call3(Stdlib_Printf[2],_i_,dec,f);
             default:var i=_ao_[1];return print(0,i)}
          case 1:
           var
            match=param[1],
            c=match[3],
            iu=match[2],
            opu=match[1],
            _aq_=caml_call1(Unary[4],opu);
           caml_call1(Stdlib[42],_aq_);
           if(1 - simple_version)print(0,iu);
           return caml_call1
                   (print$1([0,simple_version],[0,dec],[0,infix],mem),c);
          default:
           var
            match$0=param[1],
            l=match$0[4],
            r=match$0[3],
            i$0=match$0[2],
            op=match$0[1];
           caml_call1(Stdlib[42],cst$12);
           if(1 - infix)
            {caml_call1(print$1([0,simple_version],[0,dec],[0,infix],mem),l);
             caml_call1(Stdlib[42],cst$13)}
           var _ar_=caml_call1(Binary[4],op);
           caml_call1(Stdlib[42],_ar_);
           if(1 - simple_version)print(0,i$0);
           if(infix)
            {caml_call1(Stdlib[42],cst$14);
             caml_call1(print$1([0,simple_version],[0,dec],[0,infix],mem),l)}
           caml_call1(Stdlib[42],cst$15);
           caml_call1(print$1([0,simple_version],[0,dec],[0,infix],mem),r);
           return caml_call1(Stdlib[42],cst$16)}}}
    var cnt=[0,0];
    function to_dot(opt,_U_,mem)
     {if(opt)var sth=opt[1],intervals=sth;else var intervals=1;
      if(_U_)var sth$0=_U_[1],dec=sth$0;else var dec=3;
      return function(t)
       {var
         node_rename=caml_call1(Stdlib_Printf[4],_j_),
         build_link=caml_call1(Stdlib_Printf[4],_k_);
        function add_interval(i){return intervals?to_string([0,dec],i):cst$17}
        function aux(name,param)
         {if(typeof param === "number")return [0,name,cst_Empty$0];
          switch(param[0])
           {case 0:
             var _V_=param[1];
             switch(_V_[0])
              {case 0:
                var
                 x=_V_[1],
                 _W_=add_interval(caml_call2(Stdlib_Hashtbl[6],mem,x)[2]),
                 _X_=caml_call2(Stdlib[28],cst$18,_W_),
                 _Y_=caml_call2(Stdlib[28],x,_X_);
                return [0,name,caml_call1(caml_call1(node_rename,name),_Y_)];
               case 1:
                var c=_V_[1],_Z_=caml_call3(Stdlib_Printf[4],_l_,dec,c);
                return [0,name,caml_call1(caml_call1(node_rename,name),_Z_)];
               default:
                var i=_V_[1],___=add_interval(i);
                return [0,name,caml_call1(caml_call1(node_rename,name),___)]}
            case 1:
             var
              match=param[1],
              c$0=match[3],
              iu=match[2],
              opu=match[1],
              match$0=aux(name + 1 | 0,c$0),
              child=match$0[2],
              name1=match$0[1],
              _$_=add_interval(iu),
              _aa_=caml_call1(Unary[4],opu),
              _ab_=caml_call3(Stdlib_Printf[4],_m_,_aa_,_$_),
              rename=caml_call1(caml_call1(node_rename,name),_ab_),
              _ac_=caml_call2(Stdlib[28],child,rename),
              _ad_=caml_call2(build_link,name,name + 1 | 0);
             return [0,name1,caml_call2(Stdlib[28],_ad_,_ac_)];
            default:
             var
              match$1=param[1],
              l=match$1[4],
              r=match$1[3],
              i$0=match$1[2],
              op=match$1[1],
              match$2=aux(name + 1 | 0,l),
              l1=match$2[2],
              n1=match$2[1],
              match$3=aux(n1 + 1 | 0,r),
              r1=match$3[2],
              n2=match$3[1],
              _ae_=add_interval(i$0),
              _af_=caml_call1(Binary[4],op),
              _ag_=caml_call3(Stdlib_Printf[4],_n_,_af_,_ae_),
              rename$0=caml_call1(caml_call1(node_rename,name),_ag_),
              _ah_=caml_call2(Stdlib[28],r1,rename$0),
              _ai_=caml_call2(Stdlib[28],l1,_ah_),
              _aj_=caml_call2(build_link,name,n1 + 1 | 0),
              _ak_=caml_call2(Stdlib[28],_aj_,_ai_),
              _al_=caml_call2(build_link,name,name + 1 | 0);
             return [0,n2,caml_call2(Stdlib[28],_al_,_ak_)]}}
        var match=aux(cnt[1],t),res=match[2],n=match[1];
        cnt[1] = n + 1 | 0;
        return res}}
    var
     IntervalTheoryInCP_Tree=
      [0,
       get_leaf_interval,
       get_interval,
       eval_bottom_top,
       eval_top_bottom,
       print$1,
       to_dot];
    caml_register_global
     (67,IntervalTheoryInCP_Tree,"IntervalTheoryInCP__Tree");
    var
     Error=
      [248,cst_IntervalTheoryInCP_Parser_,runtime.caml_fresh_oo_id(0)];
    function eRR(s){throw Error}
    function menhir_action_07(_1){return [0,[0,_1]]}
    function menhir_fail(param)
     {caml_call1(Stdlib_Printf[3],_o_);throw [0,Assert_failure,_p_]}
    function menhir_run_23$0
     (counter,menhir_stack,menhir_lexbuf,menhir_lexer,v$2,menhir_s,tok)
     {if(typeof tok === "number")
       switch(tok)
        {case 0:
          var menhir_stack$0=[0,menhir_stack,menhir_s,v$2];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_13,
                    [0,menhir_stack$0,menhir_lexbuf,menhir_lexer]);
          var counter$6=counter + 1 | 0;
          return menhir_run_13
                  (counter$6,menhir_stack$0,menhir_lexbuf,menhir_lexer);
         case 3:
          var menhir_stack$1=[0,menhir_stack,menhir_s,v$2];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_15,
                    [0,menhir_stack$1,menhir_lexbuf,menhir_lexer]);
          var counter$5=counter + 1 | 0;
          return menhir_run_15
                  (counter$5,menhir_stack$1,menhir_lexbuf,menhir_lexer);
         case 5:
          var tok$0=caml_call1(menhir_lexer,menhir_lexbuf);
          if(typeof tok$0 !== "number" && 1 === tok$0[0])
           {var
             v_0=tok$0[1],
             tok$1=caml_call1(menhir_lexer,menhir_lexbuf),
             v$0=[2,[0,4,empty,[0,[1,v_0]],v$2]];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_goto_constr,
                      [0,
                       menhir_stack,
                       menhir_lexbuf,
                       menhir_lexer,
                       v$0,
                       menhir_s,
                       tok$1]);
            var counter$2=counter + 1 | 0;
            return menhir_goto_constr
                    (counter$2,
                     menhir_stack,
                     menhir_lexbuf,
                     menhir_lexer,
                     v$0,
                     menhir_s,
                     tok$1)}
          return eRR(0);
         case 6:
          var tok$2=caml_call1(menhir_lexer,menhir_lexbuf);
          if(typeof tok$2 !== "number" && 1 === tok$2[0])
           {var
             v_1=tok$2[1],
             tok$3=caml_call1(menhir_lexer,menhir_lexbuf),
             v=[2,[0,5,empty,[0,[1,v_1]],v$2]];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_goto_constr,
                      [0,menhir_stack,menhir_lexbuf,menhir_lexer,v,menhir_s,tok$3]);
            var counter$1=counter + 1 | 0;
            return menhir_goto_constr
                    (counter$1,
                     menhir_stack,
                     menhir_lexbuf,
                     menhir_lexer,
                     v,
                     menhir_s,
                     tok$3)}
          return eRR(0);
         case 7:
          var tok$4=caml_call1(menhir_lexer,menhir_lexbuf);
          if(typeof tok$4 !== "number" && 1 === tok$4[0])
           {var
             v_2=tok$4[1],
             tok$5=caml_call1(menhir_lexer,menhir_lexbuf),
             v$1=[2,[0,8,empty,[0,[1,v_2]],v$2]];
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_goto_constr,
                      [0,
                       menhir_stack,
                       menhir_lexbuf,
                       menhir_lexer,
                       v$1,
                       menhir_s,
                       tok$5]);
            var counter$0=counter + 1 | 0;
            return menhir_goto_constr
                    (counter$0,
                     menhir_stack,
                     menhir_lexbuf,
                     menhir_lexer,
                     v$1,
                     menhir_s,
                     tok$5)}
          return eRR(0);
         case 9:
          var menhir_stack$2=[0,menhir_stack,menhir_s,v$2];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_17,
                    [0,menhir_stack$2,menhir_lexbuf,menhir_lexer]);
          var counter$4=counter + 1 | 0;
          return menhir_run_17
                  (counter$4,menhir_stack$2,menhir_lexbuf,menhir_lexer);
         case 10:
          var menhir_stack$3=[0,menhir_stack,menhir_s,v$2];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_20,
                    [0,menhir_stack$3,menhir_lexbuf,menhir_lexer]);
          var counter$3=counter + 1 | 0;
          return menhir_run_20
                  (counter$3,menhir_stack$3,menhir_lexbuf,menhir_lexer)
         }
      return eRR(0)}
    function menhir_run_13(counter,menhir_stack,menhir_lexbuf,menhir_lexer)
     {var tok=caml_call1(menhir_lexer,menhir_lexbuf);
      if(typeof tok === "number")
       switch(tok)
        {case 0:
          var _Q_=5;
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_08$0,
                    [0,menhir_stack,menhir_lexbuf,menhir_lexer,_Q_]);
          var counter$2=counter + 1 | 0;
          return menhir_run_08$0
                  (counter$2,menhir_stack,menhir_lexbuf,menhir_lexer,_Q_);
         case 4:
          var _R_=5;
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_09$0,
                    [0,menhir_stack,menhir_lexbuf,menhir_lexer,_R_]);
          var counter$1=counter + 1 | 0;
          return menhir_run_09$0
                  (counter$1,menhir_stack,menhir_lexbuf,menhir_lexer,_R_);
         default:return eRR(0)}
      if(0 === tok[0])
       {var
         v=tok[1],
         tok$0=caml_call1(menhir_lexer,menhir_lexbuf),
         v$0=menhir_action_07(v),
         _S_=5;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_14,
                  [0,menhir_stack,menhir_lexbuf,menhir_lexer,v$0,_S_,tok$0]);
        var counter$3=counter + 1 | 0;
        return menhir_run_14
                (counter$3,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 _S_,
                 tok$0)}
      var v$1=tok[1],_T_=5;
      if(counter >= 50)
       return caml_trampoline_return
               (menhir_run_10$0,
                [0,menhir_stack,menhir_lexbuf,menhir_lexer,v$1,_T_]);
      var counter$0=counter + 1 | 0;
      return menhir_run_10$0
              (counter$0,menhir_stack,menhir_lexbuf,menhir_lexer,v$1,_T_)}
    function menhir_run_14
     (counter,menhir_stack,menhir_lexbuf,menhir_lexer,v$0,menhir_s,tok)
     {if(typeof tok === "number")
       switch(tok)
        {case 3:
          var menhir_stack$1=[0,menhir_stack,menhir_s,v$0];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_15,
                    [0,menhir_stack$1,menhir_lexbuf,menhir_lexer]);
          var counter$2=counter + 1 | 0;
          return menhir_run_15
                  (counter$2,menhir_stack$1,menhir_lexbuf,menhir_lexer);
         case 9:
          var menhir_stack$2=[0,menhir_stack,menhir_s,v$0];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_17,
                    [0,menhir_stack$2,menhir_lexbuf,menhir_lexer]);
          var counter$0=counter + 1 | 0;
          return menhir_run_17
                  (counter$0,menhir_stack$2,menhir_lexbuf,menhir_lexer);
         case 1:
         case 4:
         case 8:break;
         default:
          var
           _1=menhir_stack[3],
           menhir_s$0=menhir_stack[2],
           menhir_stack$0=menhir_stack[1],
           v=[2,[0,2,empty,v$0,_1]];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_goto_expr,
                    [0,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     v,
                     menhir_s$0,
                     tok]);
          var counter$1=counter + 1 | 0;
          return menhir_goto_expr
                  (counter$1,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s$0,
                   tok)}
      return eRR(0)}
    function menhir_run_15(counter,menhir_stack,menhir_lexbuf,menhir_lexer)
     {var tok=caml_call1(menhir_lexer,menhir_lexbuf);
      if(typeof tok === "number")
       switch(tok)
        {case 0:
          var _N_=6;
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_08$0,
                    [0,menhir_stack,menhir_lexbuf,menhir_lexer,_N_]);
          var counter$2=counter + 1 | 0;
          return menhir_run_08$0
                  (counter$2,menhir_stack,menhir_lexbuf,menhir_lexer,_N_);
         case 4:
          var _O_=6;
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_09$0,
                    [0,menhir_stack,menhir_lexbuf,menhir_lexer,_O_]);
          var counter$1=counter + 1 | 0;
          return menhir_run_09$0
                  (counter$1,menhir_stack,menhir_lexbuf,menhir_lexer,_O_);
         default:return eRR(0)}
      if(0 === tok[0])
       {var
         v=tok[1],
         tok$0=caml_call1(menhir_lexer,menhir_lexbuf),
         v$0=menhir_action_07(v);
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_16,
                  [0,menhir_stack,menhir_lexbuf,menhir_lexer,v$0,tok$0]);
        var counter$3=counter + 1 | 0;
        return menhir_run_16
                (counter$3,menhir_stack,menhir_lexbuf,menhir_lexer,v$0,tok$0)}
      var v$1=tok[1],_P_=6;
      if(counter >= 50)
       return caml_trampoline_return
               (menhir_run_10$0,
                [0,menhir_stack,menhir_lexbuf,menhir_lexer,v$1,_P_]);
      var counter$0=counter + 1 | 0;
      return menhir_run_10$0
              (counter$0,menhir_stack,menhir_lexbuf,menhir_lexer,v$1,_P_)}
    function menhir_run_16
     (counter,menhir_stack,menhir_lexbuf,menhir_lexer,v$0,tok)
     {var
       _1=menhir_stack[3],
       menhir_s=menhir_stack[2],
       menhir_stack$0=menhir_stack[1],
       v=[2,[0,0,empty,v$0,_1]];
      if(counter >= 50)
       return caml_trampoline_return
               (menhir_goto_expr,
                [0,menhir_stack$0,menhir_lexbuf,menhir_lexer,v,menhir_s,tok]);
      var counter$0=counter + 1 | 0;
      return menhir_goto_expr
              (counter$0,
               menhir_stack$0,
               menhir_lexbuf,
               menhir_lexer,
               v,
               menhir_s,
               tok)}
    function menhir_goto_expr
     (counter,menhir_stack,menhir_lexbuf,menhir_lexer,v,menhir_s,tok)
     {switch(menhir_s)
       {case 2:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_23$0,
                   [0,menhir_stack,menhir_lexbuf,menhir_lexer,v,menhir_s,tok]);
         var counter$6=counter + 1 | 0;
         return menhir_run_23$0
                 (counter$6,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok);
        case 3:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_22,
                   [0,menhir_stack,menhir_lexbuf,menhir_lexer,v,menhir_s,tok]);
         var counter$3=counter + 1 | 0;
         return menhir_run_22
                 (counter$3,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok);
        case 4:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_12,
                   [0,menhir_stack,menhir_lexbuf,menhir_lexer,v,menhir_s,tok]);
         var counter$1=counter + 1 | 0;
         return menhir_run_12
                 (counter$1,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok);
        case 5:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_14,
                   [0,menhir_stack,menhir_lexbuf,menhir_lexer,v,menhir_s,tok]);
         var counter$5=counter + 1 | 0;
         return menhir_run_14
                 (counter$5,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok);
        case 6:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_16,
                   [0,menhir_stack,menhir_lexbuf,menhir_lexer,v,tok]);
         var counter$4=counter + 1 | 0;
         return menhir_run_16
                 (counter$4,menhir_stack,menhir_lexbuf,menhir_lexer,v,tok);
        case 7:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_18,
                   [0,menhir_stack,menhir_lexbuf,menhir_lexer,v,tok]);
         var counter$2=counter + 1 | 0;
         return menhir_run_18
                 (counter$2,menhir_stack,menhir_lexbuf,menhir_lexer,v,tok);
        case 8:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_21,
                   [0,menhir_stack,menhir_lexbuf,menhir_lexer,v,menhir_s,tok]);
         var counter$0=counter + 1 | 0;
         return menhir_run_21
                 (counter$0,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok);
        case 9:
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_run_23$0,
                   [0,menhir_stack,menhir_lexbuf,menhir_lexer,v,menhir_s,tok]);
         var counter$7=counter + 1 | 0;
         return menhir_run_23$0
                 (counter$7,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v,
                  menhir_s,
                  tok);
        default:return menhir_fail(0)}}
    function menhir_run_22
     (counter,menhir_stack,menhir_lexbuf,menhir_lexer,v$0,menhir_s,tok)
     {if(typeof tok === "number")
       switch(tok)
        {case 3:
          var menhir_stack$1=[0,menhir_stack,menhir_s,v$0];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_15,
                    [0,menhir_stack$1,menhir_lexbuf,menhir_lexer]);
          var counter$2=counter + 1 | 0;
          return menhir_run_15
                  (counter$2,menhir_stack$1,menhir_lexbuf,menhir_lexer);
         case 9:
          var menhir_stack$2=[0,menhir_stack,menhir_s,v$0];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_17,
                    [0,menhir_stack$2,menhir_lexbuf,menhir_lexer]);
          var counter$0=counter + 1 | 0;
          return menhir_run_17
                  (counter$0,menhir_stack$2,menhir_lexbuf,menhir_lexer);
         case 1:
         case 4:
         case 8:break;
         default:
          var
           menhir_s$0=menhir_stack[2],
           menhir_stack$0=menhir_stack[1],
           v=[1,[0,0,empty,v$0]];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_goto_expr,
                    [0,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     v,
                     menhir_s$0,
                     tok]);
          var counter$1=counter + 1 | 0;
          return menhir_goto_expr
                  (counter$1,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s$0,
                   tok)}
      return eRR(0)}
    function menhir_run_17(counter,menhir_stack,menhir_lexbuf,menhir_lexer)
     {var tok=caml_call1(menhir_lexer,menhir_lexbuf);
      if(typeof tok === "number")
       switch(tok)
        {case 0:
          var _K_=7;
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_08$0,
                    [0,menhir_stack,menhir_lexbuf,menhir_lexer,_K_]);
          var counter$2=counter + 1 | 0;
          return menhir_run_08$0
                  (counter$2,menhir_stack,menhir_lexbuf,menhir_lexer,_K_);
         case 4:
          var _L_=7;
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_09$0,
                    [0,menhir_stack,menhir_lexbuf,menhir_lexer,_L_]);
          var counter$1=counter + 1 | 0;
          return menhir_run_09$0
                  (counter$1,menhir_stack,menhir_lexbuf,menhir_lexer,_L_);
         default:return eRR(0)}
      if(0 === tok[0])
       {var
         v=tok[1],
         tok$0=caml_call1(menhir_lexer,menhir_lexbuf),
         v$0=menhir_action_07(v);
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_18,
                  [0,menhir_stack,menhir_lexbuf,menhir_lexer,v$0,tok$0]);
        var counter$3=counter + 1 | 0;
        return menhir_run_18
                (counter$3,menhir_stack,menhir_lexbuf,menhir_lexer,v$0,tok$0)}
      var v$1=tok[1],_M_=7;
      if(counter >= 50)
       return caml_trampoline_return
               (menhir_run_10$0,
                [0,menhir_stack,menhir_lexbuf,menhir_lexer,v$1,_M_]);
      var counter$0=counter + 1 | 0;
      return menhir_run_10$0
              (counter$0,menhir_stack,menhir_lexbuf,menhir_lexer,v$1,_M_)}
    function menhir_run_18
     (counter,menhir_stack,menhir_lexbuf,menhir_lexer,v$0,tok)
     {var
       _1=menhir_stack[3],
       menhir_s=menhir_stack[2],
       menhir_stack$0=menhir_stack[1],
       v=[2,[0,3,empty,v$0,_1]];
      if(counter >= 50)
       return caml_trampoline_return
               (menhir_goto_expr,
                [0,menhir_stack$0,menhir_lexbuf,menhir_lexer,v,menhir_s,tok]);
      var counter$0=counter + 1 | 0;
      return menhir_goto_expr
              (counter$0,
               menhir_stack$0,
               menhir_lexbuf,
               menhir_lexer,
               v,
               menhir_s,
               tok)}
    function menhir_run_08$0
     (counter,menhir_stack,menhir_lexbuf,menhir_lexer,menhir_s)
     {var menhir_stack$0=menhir_stack,menhir_s$0=menhir_s;
      for(;;)
       {var
         menhir_stack$1=[0,menhir_stack$0,menhir_s$0],
         tok=caml_call1(menhir_lexer,menhir_lexbuf);
        if(typeof tok === "number")
         switch(tok)
          {case 0:var menhir_stack$0=menhir_stack$1,menhir_s$0=3;continue;
           case 4:
            var _H_=3;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_09$0,
                      [0,menhir_stack$1,menhir_lexbuf,menhir_lexer,_H_]);
            var counter$1=counter + 1 | 0;
            return menhir_run_09$0
                    (counter$1,menhir_stack$1,menhir_lexbuf,menhir_lexer,_H_);
           default:return eRR(0)}
        if(0 === tok[0])
         {var
           v=tok[1],
           tok$0=caml_call1(menhir_lexer,menhir_lexbuf),
           v$0=menhir_action_07(v),
           _I_=3;
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_22,
                    [0,menhir_stack$1,menhir_lexbuf,menhir_lexer,v$0,_I_,tok$0]);
          var counter$2=counter + 1 | 0;
          return menhir_run_22
                  (counter$2,
                   menhir_stack$1,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   _I_,
                   tok$0)}
        var v$1=tok[1],_J_=3;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_10$0,
                  [0,menhir_stack$1,menhir_lexbuf,menhir_lexer,v$1,_J_]);
        var counter$0=counter + 1 | 0;
        return menhir_run_10$0
                (counter$0,menhir_stack$1,menhir_lexbuf,menhir_lexer,v$1,_J_)}}
    function menhir_run_09$0
     (counter,menhir_stack,menhir_lexbuf,menhir_lexer,menhir_s)
     {var menhir_stack$0=menhir_stack,menhir_s$0=menhir_s;
      for(;;)
       {var
         menhir_stack$1=[0,menhir_stack$0,menhir_s$0],
         tok=caml_call1(menhir_lexer,menhir_lexbuf);
        if(typeof tok === "number")
         switch(tok)
          {case 0:
            var _E_=4;
            if(counter >= 50)
             return caml_trampoline_return
                     (menhir_run_08$0,
                      [0,menhir_stack$1,menhir_lexbuf,menhir_lexer,_E_]);
            var counter$2=counter + 1 | 0;
            return menhir_run_08$0
                    (counter$2,menhir_stack$1,menhir_lexbuf,menhir_lexer,_E_);
           case 4:var menhir_stack$0=menhir_stack$1,menhir_s$0=4;continue;
           default:return eRR(0)}
        if(0 === tok[0])
         {var
           v=tok[1],
           tok$0=caml_call1(menhir_lexer,menhir_lexbuf),
           v$0=menhir_action_07(v),
           _F_=4;
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_12,
                    [0,menhir_stack$1,menhir_lexbuf,menhir_lexer,v$0,_F_,tok$0]);
          var counter$1=counter + 1 | 0;
          return menhir_run_12
                  (counter$1,
                   menhir_stack$1,
                   menhir_lexbuf,
                   menhir_lexer,
                   v$0,
                   _F_,
                   tok$0)}
        var v$1=tok[1],_G_=4;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_10$0,
                  [0,menhir_stack$1,menhir_lexbuf,menhir_lexer,v$1,_G_]);
        var counter$0=counter + 1 | 0;
        return menhir_run_10$0
                (counter$0,menhir_stack$1,menhir_lexbuf,menhir_lexer,v$1,_G_)}}
    function menhir_run_12
     (counter,menhir_stack,menhir_lexbuf,menhir_lexer,v,menhir_s,tok)
     {if(typeof tok === "number")
       switch(tok)
        {case 0:
          var menhir_stack$0=[0,menhir_stack,menhir_s,v];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_13,
                    [0,menhir_stack$0,menhir_lexbuf,menhir_lexer]);
          var counter$4=counter + 1 | 0;
          return menhir_run_13
                  (counter$4,menhir_stack$0,menhir_lexbuf,menhir_lexer);
         case 2:
          var
           tok$0=caml_call1(menhir_lexer,menhir_lexbuf),
           menhir_s$0=menhir_stack[2],
           menhir_stack$1=menhir_stack[1];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_goto_expr,
                    [0,
                     menhir_stack$1,
                     menhir_lexbuf,
                     menhir_lexer,
                     v,
                     menhir_s$0,
                     tok$0]);
          var counter$2=counter + 1 | 0;
          return menhir_goto_expr
                  (counter$2,
                   menhir_stack$1,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s$0,
                   tok$0);
         case 3:
          var menhir_stack$2=[0,menhir_stack,menhir_s,v];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_15,
                    [0,menhir_stack$2,menhir_lexbuf,menhir_lexer]);
          var counter$3=counter + 1 | 0;
          return menhir_run_15
                  (counter$3,menhir_stack$2,menhir_lexbuf,menhir_lexer);
         case 9:
          var menhir_stack$3=[0,menhir_stack,menhir_s,v];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_17,
                    [0,menhir_stack$3,menhir_lexbuf,menhir_lexer]);
          var counter$1=counter + 1 | 0;
          return menhir_run_17
                  (counter$1,menhir_stack$3,menhir_lexbuf,menhir_lexer);
         case 10:
          var menhir_stack$4=[0,menhir_stack,menhir_s,v];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_20,
                    [0,menhir_stack$4,menhir_lexbuf,menhir_lexer]);
          var counter$0=counter + 1 | 0;
          return menhir_run_20
                  (counter$0,menhir_stack$4,menhir_lexbuf,menhir_lexer)
         }
      return eRR(0)}
    function menhir_run_20(counter,menhir_stack,menhir_lexbuf,menhir_lexer)
     {var tok=caml_call1(menhir_lexer,menhir_lexbuf);
      if(typeof tok === "number")
       switch(tok)
        {case 0:
          var _A_=8;
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_08$0,
                    [0,menhir_stack,menhir_lexbuf,menhir_lexer,_A_]);
          var counter$3=counter + 1 | 0;
          return menhir_run_08$0
                  (counter$3,menhir_stack,menhir_lexbuf,menhir_lexer,_A_);
         case 4:
          var _B_=8;
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_09$0,
                    [0,menhir_stack,menhir_lexbuf,menhir_lexer,_B_]);
          var counter$2=counter + 1 | 0;
          return menhir_run_09$0
                  (counter$2,menhir_stack,menhir_lexbuf,menhir_lexer,_B_);
         default:return eRR(0)}
      if(0 === tok[0])
       {var
         v=tok[1],
         tok$0=caml_call1(menhir_lexer,menhir_lexbuf),
         v$0=menhir_action_07(v),
         _C_=8;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_21,
                  [0,menhir_stack,menhir_lexbuf,menhir_lexer,v$0,_C_,tok$0]);
        var counter$1=counter + 1 | 0;
        return menhir_run_21
                (counter$1,
                 menhir_stack,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$0,
                 _C_,
                 tok$0)}
      var v$1=tok[1],_D_=8;
      if(counter >= 50)
       return caml_trampoline_return
               (menhir_run_10$0,
                [0,menhir_stack,menhir_lexbuf,menhir_lexer,v$1,_D_]);
      var counter$0=counter + 1 | 0;
      return menhir_run_10$0
              (counter$0,menhir_stack,menhir_lexbuf,menhir_lexer,v$1,_D_)}
    function menhir_run_21
     (counter,menhir_stack,menhir_lexbuf,menhir_lexer,v$0,menhir_s,tok)
     {if(typeof tok === "number")
       switch(tok)
        {case 3:
          var menhir_stack$1=[0,menhir_stack,menhir_s,v$0];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_15,
                    [0,menhir_stack$1,menhir_lexbuf,menhir_lexer]);
          var counter$2=counter + 1 | 0;
          return menhir_run_15
                  (counter$2,menhir_stack$1,menhir_lexbuf,menhir_lexer);
         case 9:
          var menhir_stack$2=[0,menhir_stack,menhir_s,v$0];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_17,
                    [0,menhir_stack$2,menhir_lexbuf,menhir_lexer]);
          var counter$0=counter + 1 | 0;
          return menhir_run_17
                  (counter$0,menhir_stack$2,menhir_lexbuf,menhir_lexer);
         case 1:
         case 4:
         case 8:break;
         default:
          var
           _1=menhir_stack[3],
           menhir_s$0=menhir_stack[2],
           menhir_stack$0=menhir_stack[1],
           v=[2,[0,1,empty,v$0,_1]];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_goto_expr,
                    [0,
                     menhir_stack$0,
                     menhir_lexbuf,
                     menhir_lexer,
                     v,
                     menhir_s$0,
                     tok]);
          var counter$1=counter + 1 | 0;
          return menhir_goto_expr
                  (counter$1,
                   menhir_stack$0,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s$0,
                   tok)}
      return eRR(0)}
    function menhir_run_10$0
     (counter,menhir_stack,menhir_lexbuf,menhir_lexer,v$1,menhir_s)
     {var tok=caml_call1(menhir_lexer,menhir_lexbuf);
      if(typeof tok === "number")
       switch(tok)
        {case 1:
         case 4:
         case 8:break;
         default:
          var v=[0,[1,v$1]];
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_goto_expr,
                    [0,menhir_stack,menhir_lexbuf,menhir_lexer,v,menhir_s,tok]);
          var counter$0=counter + 1 | 0;
          return menhir_goto_expr
                  (counter$0,
                   menhir_stack,
                   menhir_lexbuf,
                   menhir_lexer,
                   v,
                   menhir_s,
                   tok)}
      else
       if(0 === tok[0])
        {var
          v_0=tok[1],
          tok$0=caml_call1(menhir_lexer,menhir_lexbuf),
          v$0=[2,[0,0,empty,[0,[0,v_0]],[0,[1,v$1]]]];
         if(counter >= 50)
          return caml_trampoline_return
                  (menhir_goto_expr,
                   [0,
                    menhir_stack,
                    menhir_lexbuf,
                    menhir_lexer,
                    v$0,
                    menhir_s,
                    tok$0]);
         var counter$1=counter + 1 | 0;
         return menhir_goto_expr
                 (counter$1,
                  menhir_stack,
                  menhir_lexbuf,
                  menhir_lexer,
                  v$0,
                  menhir_s,
                  tok$0)}
      return eRR(0)}
    function menhir_goto_constr
     (counter,menhir_stack$1,menhir_lexbuf,menhir_lexer,v$2,menhir_s$1,tok)
     {if(typeof tok === "number")
       switch(tok)
        {case 0:
          var menhir_stack$2=[0,menhir_stack$1,menhir_s$1,v$2],_w_=9;
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_08$0,
                    [0,menhir_stack$2,menhir_lexbuf,menhir_lexer,_w_]);
          var counter$2=counter + 1 | 0;
          return menhir_run_08$0
                  (counter$2,menhir_stack$2,menhir_lexbuf,menhir_lexer,_w_);
         case 4:
          var menhir_stack$3=[0,menhir_stack$1,menhir_s$1,v$2],_x_=9;
          if(counter >= 50)
           return caml_trampoline_return
                   (menhir_run_09$0,
                    [0,menhir_stack$3,menhir_lexbuf,menhir_lexer,_x_]);
          var counter$1=counter + 1 | 0;
          return menhir_run_09$0
                  (counter$1,menhir_stack$3,menhir_lexbuf,menhir_lexer,_x_);
         case 8:
          var
           v=[0,v$2,0],
           menhir_stack=menhir_stack$1,
           v$0=v,
           menhir_s=menhir_s$1;
          for(;;)
           {if(2 === menhir_s)
             {var _1=menhir_stack[3];return [0,to_tbl(_1),v$0]}
            if(9 > menhir_s)return menhir_fail(0);
            var
             _1$0=menhir_stack[3],
             menhir_s$0=menhir_stack[2],
             menhir_stack$0=menhir_stack[1],
             v$1=[0,_1$0,v$0],
             menhir_stack=menhir_stack$0,
             v$0=v$1,
             menhir_s=menhir_s$0}
         default:return eRR(0)}
      if(0 === tok[0])
       {var
         v_0=tok[1],
         menhir_stack$4=[0,menhir_stack$1,menhir_s$1,v$2],
         tok$0=caml_call1(menhir_lexer,menhir_lexbuf),
         v$3=menhir_action_07(v_0),
         _y_=9;
        if(counter >= 50)
         return caml_trampoline_return
                 (menhir_run_23$0,
                  [0,menhir_stack$4,menhir_lexbuf,menhir_lexer,v$3,_y_,tok$0]);
        var counter$3=counter + 1 | 0;
        return menhir_run_23$0
                (counter$3,
                 menhir_stack$4,
                 menhir_lexbuf,
                 menhir_lexer,
                 v$3,
                 _y_,
                 tok$0)}
      var v_2=tok[1],menhir_stack$5=[0,menhir_stack$1,menhir_s$1,v$2],_z_=9;
      if(counter >= 50)
       return caml_trampoline_return
               (menhir_run_10$0,
                [0,menhir_stack$5,menhir_lexbuf,menhir_lexer,v_2,_z_]);
      var counter$0=counter + 1 | 0;
      return menhir_run_10$0
              (counter$0,menhir_stack$5,menhir_lexbuf,menhir_lexer,v_2,_z_)}
    function menhir_run_23
     (menhir_stack,menhir_lexbuf,menhir_lexer,v,menhir_s,tok)
     {return caml_trampoline
              (menhir_run_23$0
                (0,menhir_stack,menhir_lexbuf,menhir_lexer,v,menhir_s,tok))}
    function menhir_run_08(menhir_stack,menhir_lexbuf,menhir_lexer,menhir_s)
     {return caml_trampoline
              (menhir_run_08$0
                (0,menhir_stack,menhir_lexbuf,menhir_lexer,menhir_s))}
    function menhir_run_09(menhir_stack,menhir_lexbuf,menhir_lexer,menhir_s)
     {return caml_trampoline
              (menhir_run_09$0
                (0,menhir_stack,menhir_lexbuf,menhir_lexer,menhir_s))}
    function menhir_run_10(menhir_stack,menhir_lexbuf,menhir_lexer,v,menhir_s)
     {return caml_trampoline
              (menhir_run_10$0
                (0,menhir_stack,menhir_lexbuf,menhir_lexer,v,menhir_s))}
    function menhir_run_06
     (menhir_stack,menhir_lexbuf,menhir_lexer,v,menhir_s,tok)
     {var menhir_stack$0=[0,menhir_stack,menhir_s,v];
      if(typeof tok === "number")
       switch(tok)
        {case 0:
          return menhir_run_08(menhir_stack$0,menhir_lexbuf,menhir_lexer,2);
         case 4:
          return menhir_run_09(menhir_stack$0,menhir_lexbuf,menhir_lexer,2);
         default:return eRR(0)}
      if(0 === tok[0])
       {var
         v_0=tok[1],
         tok$0=caml_call1(menhir_lexer,menhir_lexbuf),
         v$0=menhir_action_07(v_0);
        return menhir_run_23
                (menhir_stack$0,menhir_lexbuf,menhir_lexer,v$0,2,tok$0)}
      var v_2=tok[1];
      return menhir_run_10(menhir_stack$0,menhir_lexbuf,menhir_lexer,v_2,2)}
    function f(menhir_lexer,menhir_lexbuf)
     {var tok$3=caml_call1(menhir_lexer,menhir_lexbuf),menhir_stack$7=0;
      if(typeof tok$3 === "number")
       {if(1 === tok$3)
         {var tok$4=caml_call1(menhir_lexer,menhir_lexbuf);
          return menhir_run_06
                  (menhir_stack$7,menhir_lexbuf,menhir_lexer,0,0,tok$4)}}
      else
       if(0 === tok$3[0])
        {var v$3=tok$3[1],menhir_stack$3=menhir_stack$7,v$1=v$3,menhir_s$0=0;
         for(;;)
          {var
            menhir_stack$4=[0,menhir_stack$3,menhir_s$0,v$1],
            tok=caml_call1(menhir_lexer,menhir_lexbuf);
           if(typeof tok !== "number" && 1 === tok[0])
            {var
              v_0=tok[1],
              menhir_stack$5=[0,menhir_stack$4,v_0],
              tok$0=caml_call1(menhir_lexer,menhir_lexbuf);
             if(typeof tok$0 !== "number" && 1 === tok$0[0])
              {var
                v_1=tok$0[1],
                menhir_stack$6=[0,menhir_stack$5,v_1],
                tok$1=caml_call1(menhir_lexer,menhir_lexbuf);
               if(typeof tok$1 === "number")
                {if(1 === tok$1)
                  {var
                    tok$2=caml_call1(menhir_lexer,menhir_lexbuf),
                    menhir_stack=menhir_stack$6,
                    v$0=0;
                   for(;;)
                    {var
                      _3=menhir_stack[2],
                      menhir_stack$0=menhir_stack[1],
                      _2=menhir_stack$0[2],
                      menhir_stack$1=menhir_stack$0[1],
                      _1=menhir_stack$1[3],
                      menhir_s=menhir_stack$1[2],
                      menhir_stack$2=menhir_stack$1[1],
                      v=[0,[0,_1,make_interval(_2,_3)],v$0];
                     if(1 !== menhir_s)
                      return menhir_s
                              ?menhir_fail(0)
                              :menhir_run_06
                                (menhir_stack$2,menhir_lexbuf,menhir_lexer,v,menhir_s,tok$2);
                     var menhir_stack=menhir_stack$2,v$0=v}}}
               else
                if(0 === tok$1[0])
                 {var
                   v$2=tok$1[1],
                   menhir_stack$3=menhir_stack$6,
                   v$1=v$2,
                   menhir_s$0=1;
                  continue}
               return eRR(0)}
             return eRR(0)}
           return eRR(0)}}
      return eRR(0)}
    var IntervalTheoryInCP_Parser=[0,Error,f];
    caml_register_global
     (69,IntervalTheoryInCP_Parser,"IntervalTheoryInCP__Parser");
    function f$1(counter,lexbuf)
     {var _v_=0;
      if(counter >= 50)
       return caml_trampoline_return(ocaml_lex_f_rec$0,[0,lexbuf,_v_]);
      var counter$0=counter + 1 | 0;
      return ocaml_lex_f_rec$0(counter$0,lexbuf,_v_)}
    function ocaml_lex_f_rec$0(counter,lexbuf,ocaml_lex_state)
     {var ocaml_lex_state$0=ocaml_lex_state;
      for(;;)
       {var
         ocaml_lex_state$1=
          caml_call3
           (Stdlib_Lexing[20],ocaml_lex_tables,ocaml_lex_state$0,lexbuf);
        if(14 < ocaml_lex_state$1 >>> 0)
         {caml_call1(lexbuf[1],lexbuf);
          var ocaml_lex_state$0=ocaml_lex_state$1;
          continue}
        switch(ocaml_lex_state$1)
         {case 0:
           if(counter >= 50)return caml_trampoline_return(f$1,[0,lexbuf]);
           var counter$0=counter + 1 | 0;
           return f$1(counter$0,lexbuf);
          case 1:return 8;
          case 2:
           var c=caml_call3(Stdlib_Lexing[16],lexbuf,lexbuf[5],lexbuf[6]);
           return [0,c];
          case 3:
           var c$0=caml_call3(Stdlib_Lexing[16],lexbuf,lexbuf[5],lexbuf[6]);
           return [1,caml_float_of_string(c$0)];
          case 4:
           var c$1=caml_call3(Stdlib_Lexing[16],lexbuf,lexbuf[5],lexbuf[6]);
           return [1,caml_float_of_string(caml_call2(Stdlib[28],c$1,cst$19))];
          case 5:return 1;
          case 6:return 3;
          case 7:return 9;
          case 8:return 10;
          case 9:return 0;
          case 10:return 6;
          case 11:return 5;
          case 12:return 7;
          case 13:return 4;
          default:return 2}}}
    function f$0(lexbuf){return caml_trampoline(f$1(0,lexbuf))}
    function ocaml_lex_f_rec(lexbuf,ocaml_lex_state)
     {return caml_trampoline(ocaml_lex_f_rec$0(0,lexbuf,ocaml_lex_state))}
    var IntervalTheoryInCP_Lexer=[0,ocaml_lex_tables,f$0,ocaml_lex_f_rec];
    caml_register_global
     (71,IntervalTheoryInCP_Lexer,"IntervalTheoryInCP__Lexer");
    function parse_string(s){return f(f$0,caml_call2(Stdlib_Lexing[3],0,s))}
    function parse_file(f$1){return f(f$0,caml_call2(Stdlib_Lexing[2],0,f$1))}
    var IntervalTheoryInCP_Parsing_com=[0,parse_string,parse_file];
    caml_register_global
     (72,
      IntervalTheoryInCP_Parsing_com,
      "IntervalTheoryInCP__Parsing_commands");
    function stop_condition(precision,mem)
     {var
       keys=caml_call1(Stdlib_Hashtbl[21],mem),
       param$1=caml_call1(keys,0),
       param=param$1;
      for(;;)
       {if(! param)return 1;
        var b=param[2],a=param[1],mem$0=caml_call2(Stdlib_Hashtbl[6],mem,a);
        if(caml_call1(_a_,mem$0[2]))return 1;
        var size1=size(mem$0[1]),size2=size(mem$0[2]);
        if(precision < size1 - size2)return 0;
        var param$0=caml_call1(b,0),param=param$0}}
    function constraint_inter(opt,_t_,_s_,_r_,param)
     {var t$0=param[2],mem=param[1];
      if(opt)var sth=opt[1],dec=sth;else var dec=3;
      if(_t_)var sth$0=_t_[1],print_tree=sth$0;else var print_tree=0;
      if(_s_)var sth$1=_s_[1],verbose=sth$1;else var verbose=0;
      if(_r_)var sth$2=_r_[1],precision=sth$2;else var precision=0.1;
      var queue=caml_call1(Stdlib_Queue[2],0);
      function _u_(e){return caml_call2(Stdlib_Queue[3],e,queue)}
      caml_call2(Stdlib_List[17],_u_,t$0);
      for(;;)
       {if(caml_call1(Stdlib_Queue[13],queue))return 0;
        var
         t$1=caml_call1(Stdlib_Queue[5],queue),
         bt=eval_bottom_top(mem,t$1),
         t=eval_top_bottom(mem,bt);
        if(verbose){print$0([0,dec],mem);caml_call1(Stdlib[46],cst$20)}
        if(print_tree)
         {caml_call1(print$1(_q_,[0,dec],0,mem),t);
          caml_call1(Stdlib[46],cst$21)}
        if(stop_condition(precision,mem))continue;
        caml_call2(Stdlib_Queue[3],t$1,queue)}}
    var IntervalTheoryInCP_Constraints=[0,constraint_inter,stop_condition];
    caml_register_global
     (74,
      IntervalTheoryInCP_Constraints,
      "IntervalTheoryInCP__Constraints_eval");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
